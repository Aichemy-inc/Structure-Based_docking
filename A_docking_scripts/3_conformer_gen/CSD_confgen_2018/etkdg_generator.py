"""
    This is the ETKDG conformer generator, adapted to have a similar interface to the CCDC conformer generator.

"""

from rdkit import Chem, RDConfig
from rdkit.Chem import AllChem, rdMolAlign
import ccdc.molecule

def rdkit_conformer_to_ccdc(mol, conf_id):
    "convert an rdkit embedded conformer to a CCDC molecule"
    mol_block = Chem.MolToMolBlock(mol, confId=conf_id)
    ccdc_mol = ccdc.molecule.Molecule.from_string(mol_block, 'sdf')
    return ccdc_mol

def rdkit_bond_type(b):
    types = {
        'Unknown' : Chem.rdchem.BondType.UNSPECIFIED,
        'Single' : Chem.rdchem.BondType.SINGLE,
        'Double' : Chem.rdchem.BondType.DOUBLE,
        'Triple' : Chem.rdchem.BondType.TRIPLE,
        'Quadruple' : Chem.rdchem.BondType.QUADRUPLE,
        'Aromatic' : Chem.rdchem.BondType.AROMATIC,
        'Delocalised' : Chem.rdchem.BondType.UNSPECIFIED,
        'Pi' : Chem.rdchem.BondType.UNSPECIFIED
        }
    return types[str(b.bond_type)]

def create_rdkit_2d_mol_from_ccdc(mol):
    "create an rdkit molecule atom-by-atom. does not handle chirality"
    ed_mol = Chem.rdchem.EditableMol(Chem.rdchem.Mol())
    at_idx={}
    # add atoms
    for a in mol.atoms:
        rd_atom = Chem.rdchem.Atom(a.atomic_number)
        rd_atom.SetFormalCharge(a.formal_charge)
        at_idx[a] = ed_mol.AddAtom(rd_atom)
    # add bonds
    for b in mol.bonds:
        ed_mol.AddBond(at_idx[b.atoms[0]], at_idx[b.atoms[1]], rdkit_bond_type(b))
    # tidy up
    rd_mol = ed_mol.GetMol()
    rd_mol.ClearComputedProps()
    Chem.GetSymmSSSR(rd_mol)
    rd_mol.UpdatePropertyCache(False)
    Chem.Cleanup(rd_mol)
    Chem.SanitizeMol(rd_mol)
    return rd_mol

def ccdc_to_rdkit(mol):
    """convert a ccdc molecule to an rdkit molecule
    This tries a number of different methods to find a successful conversion.
    The order used is suitable for CCDC molecules loaded originally from mol2.
    """
    rdkit_mol = None
    if not rdkit_mol:
        mol_block = mol.to_string('mol2')
        rdkit_mol = Chem.MolFromMol2Block(mol_block)
    if not rdkit_mol:
        mol_block = mol.to_string('mol')
        rdkit_mol = Chem.MolFromMolBlock(mol_block)
    if not rdkit_mol:
        smiles = mol.smiles
        rdkit_mol = Chem.MolFromSmiles(smiles)
    if not rdkit_mol:
        try:
            rdkit_mol = create_rdkit_2d_mol_from_ccdc(mol)
        except:
            pass
    return rdkit_mol

class EtkdgConformer:
    "A ccdc.conformer.ConformerHit substitute, generated by ETKDG containing a CCDC molecule"
    def __init__(self, mol):
        self.molecule = mol


class EtkdgGenerator:
    "A ccdc.conformer.ConformerGenerator substiute, that generates conformers with ETKDG"
    def __init__(self, settings):
        self._settings = settings

    def generate(self, mol):
        rdkit_mol = ccdc_to_rdkit(mol)
        if not rdkit_mol:
            print("Warning: can't convert mol, giving up")
            return [EtkdgConformer(mol)]    # giving up and returning the input!
        prep_mol = Chem.AddHs(rdkit_mol)
        cids = AllChem.EmbedMultipleConfs(prep_mol, self._settings.max_conformers, AllChem.ETKDG())
        confs = [EtkdgConformer(rdkit_conformer_to_ccdc(prep_mol, cid)) for cid in cids]
        return confs
