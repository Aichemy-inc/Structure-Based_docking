#!/usr/bin/env python

###########################################################################
##
##	Peter M.U. Ung @ MSSM
##
##	v1.0	- 13.11.21
##      v2.0    - 14.11.06 - corrected a bug that generate 1 fewer ligand
##                           in each multi-ligand cluster. Now generate a
##                           SDF file with 'cluster tag'.
##
##	Purpose: Summerize docking result with Chemical similarity, Rank
##		 the results by clusters and the first set of docking inputs
##
##		 Should be able to take in all SDF from different docking 
##		 programs if processed to give the naming format.
##
##	Read in a SDF file with multiple structures generated from 
##	Docking processing (molecule name will contain ZINC ID, Rank, 
##	Score (1 decimal place), Type).
##	1) For each molecule calculate the 2D fingerprint
##	2) Cluster molecules based on Tanimoto similarity.
##	3) Sort each cluster by size of cluster (except the last group; each
##	   mol in this group has no cluster partner)
##	4) 3 Output: a) reordered Mol file according to cluster
##		     b) 2D Image of the clustered compounds
##		     c) HTML page that contact links to the 2D images
##
##	Required:	1_vina_screen_preprocess.py
##			2_vina_screen_get_top.py
##			3_vina_screen_extract_mol.pl
##			other docking processing scripts
##			  *.top$i.txt
##
##	** The name of the Molecules in the input SDF file must have
##	   this format:
##	     -- (Mol Name, Rank, Score, Type) separated by '::'
##	   	MOLECULE_NAME::RANK::SCORE::DOCK_TYPE
##
##	   e.g. ZINC464618334::22::-12.2::FRED
##
##
##	Options: Daylight-like fingerprint and MACCS keys can be used, just 
##		 need to change the code.
##
##	Preset:	ECFP: default radius is 4. FCFP can be used
##		(Martin YC, Muchmore S. DOI: 10.1002/qsar.200810176)
##		Similarity Choice: Tanimoto (Default)
##		Clustering method: Butina Clustering (JCICS 39 747 (1999))
##
###########################################################################

import os,sys
msg = """\n  ## Usage: x.py f=[Docking inputs: sdf]
              [Tanimoto Cutoff: float]
	      [output prefix] [receptor structure: pdb]

              # and output a list of molecule png (temp.$name.png)
              [png of clustered ligands]

             e.g.>  x.py f=vina.sdf,fred.sdf,ehits.sdf 
                         0.4 output.clust-0.4 receptor.pdb \n\n"""
if len(sys.argv) != 5: sys.exit(msg)

import re,gzip,bz2,glob,Image,HTML,rdkit
import numpy as np
from CommonUtility import *
from rdkit import Chem
from rdkit.Chem import Draw
from rdkit.Chem import AllChem

OUTPUT_PREFIX= sys.argv[3]
CUT          = 1-float(sys.argv[2])
REF_PDB      = sys.argv[4]

## Get the docking inputs
Dock_Files = [ glob.glob(name)[0]
               for name in sys.argv[1].split('=')[1].split(',')]
print Dock_Files


#a#####################################################################
## Sort and compare to eliminate duplicate
## For duplicates, the Type, Rank and Score are combined
Mol_Hash = {}	# Hash Table of all available molecule info

for dock_file in Dock_Files:
  dock = file_handle(dock_file)
  Temp = {}	# Hash Table of current $dock_file 
  Dock = [x for x in Chem.ForwardSDMolSupplier(dock) if x is not None]
  print " --> read in from "+dock_file+" : "+str(len(Dock))
  for m in Dock: Temp[m.GetProp('_Name').split('::')[0]] = m


  ## Compare $Mol_Hash and $dock_file hash table
  ## Find duplicate, append the title, then remove one of the copies
  for hash_key in Mol_Hash.keys():
    if not hash_key: break
    hash_m    = Mol_Hash[hash_key]
    Hash_Info = hash_m.GetProp('_Name').split('::') # (ZINC, Rank, Score, Type)

    ## If mol is found in the Master, update the existing entry with new name
    if Temp.get(hash_key):
      temp_m    = Temp[hash_key]
      Temp_Info = temp_m.GetProp('_Name').split('::')
      new_name  = hash_key+'::'+str(Hash_Info[1]+'/'+Temp_Info[1])+'::'+str(Hash_Info[2]+'/'+Temp_Info[2])+'::'+str(Hash_Info[3]+'/'+Temp_Info[3])
      temp_m.SetProp('_Name', new_name)
      Mol_Hash[hash_key] = temp_m
      del Temp[hash_key]	# Remove the duplicate from $dock_file

  ## Unique molecules are added to the Master Hash Table as new entries
#  new_name = hash_key+'::'+str(Hash_Info[1]+'/')+'::'+str(Hash_Info[2])+'::'+str(Hash_Info[3])
#  hash_m.SetProp('_Name', new_nm)
  for temp_key in Temp.keys(): Mol_Hash[temp_key] = Temp[temp_key]
  print "  ## Added "+str(len(Temp))+" Unique Entries from "+dock_file+" ##"

## Convert Hash back into List. Isolate entries with multiple top hits
Multi_Hit = []
Singl_Hit = []
All_Hit   = []
for key in Mol_Hash.keys():
  m = Mol_Hash[key]
  All_Hit.append(m)
  if re.search(r'/', m.GetProp('_Name')):
    Multi_Hit.append(m)
  else:
    Singl_Hit.append(m)
print "  ### Unique Entries Found: "+str(len(Multi_Hit)+len(Singl_Hit))+" ###\n"
print "  ### "+str(len(Multi_Hit))+" Entries have < 1+ > occurances ###"
print "  ### "+str(len(Singl_Hit))+" Entries have < 1  > occurance  ###"


########################################################################
def main():
  ## Make clusters of all imported results
  name = OUTPUT_PREFIX+'.all-hit'
  Mol_Cluster = Do_Fp(All_Hit,   name)
  Pymol_Html_Gen(Mol_Cluster, name, column=5)

  ## Show clusters of imported results that have at least 1 overlap
  name = OUTPUT_PREFIX+'.multi-hit'
  Mol_Cluster = Do_Fp(Multi_Hit, name)
  Pymol_Html_Gen(Mol_Cluster, name, column=5)

  ## Show clusters of imported results that has no overlap
#  name = OUTPUT_PREFIX+'.singl-hit'
#  Mol_Cluster = Do_Fp(Singl_Hit, name)
#  Pymol_Html_Gen(Mol_Cluster, name, column=5)



########################################################################
########################################################################

def Do_Fp (Mol, output_name):
    #### Daylight-like fingerprint
  #from rdkit.Chem.Fingerprints import FingerprintMols
  #Fp = [FingerprintMols.FingerprintMol(x) for x in Mol]

    #### Morgan (ECFP-like) fingerprint
  Fp = [AllChem.GetMorganFingerprintAsBitVect(x, 2, 2048) for x in Mol]

    #### MACCS 166-bit keys ####
#  from rdkit.Chem import MACCSkeys
#  Fp = [MACCSkeys.GenMACCSKeys(x) for x in Mol]

    # Cluster based on fingerprints 
  Cluster_List = ClusterFps(Fp, cutoff=CUT)


  #####################################################################
  ## Build a List of array of clusters Clusters = [[clust1], [clust2], [clust3], ...]
  M_Clusters = []
  for cluster, List in enumerate(Cluster_List):
    if len(List) > 1:
      M_Temp = [ Mol[clust_id] for clust_id in List ]
      M_Clusters.append(M_Temp)
    else:
      M_Clusters.append([Mol[List[0]]])
  print "  ## No. of cluster: "+str(len(M_Clusters))+" for Tc = "+str(CUT)+" ##\n"

  ## Generate table of clustered molecules
  Multi_list  = []		# List of all clusters
  Single_list = []	# Mol that are scored as a single cluster

  for Cluster in M_Clusters:
    # If the cluster has multiple members, rank them based on average of all ranks
    if len(Cluster) == 1:
      m = Cluster[0]
      i = m.GetProp("_Name")
      s = i.split('::')
      r = 0.0
      if re.search(r'/', s[1]): # If Rank has '/', that means it has multiple hits
        Y = [float(x) for x in s[1].split('/')]
        r = np.average(Y)
      else:			# otherwise, divide the rank by 2
        r = float(s[1])/2.0
      Single_list.append([m,s[0],s[1],s[2],s[3],r])	#(Mol, Name, Rank, Score, Type, rank_avg)
    else:
      clust_list = []
      for m in Cluster:
        i = m.GetProp("_Name")
        s = i.split('::')
        r = 0.0
        if re.search(r'/', s[1]):
          Y = [float(x) for x in s[1].split('/')]
          r = np.average(Y)
        else:
          r = float(s[1])/2.0
        ## [mol_data, Name, Rank, Score, Type, rank_avg]
        clust_list.append([m,s[0],s[1],s[2],s[3],r])
      Multi_list.append(clust_list)

  Multi_list.append(Single_list)
  return Multi_list


####################################################################
#####################################################################

def Pymol_Html_Gen(Mol_List, output_name, column=5):
  Img_Data = []

  pymol_nme = output_name+".pml"
  pymol_pml = open(pymol_nme, 'w')
  pymol_pml.write("load "+REF_PDB+"\nshow cartoon, poly\nhide lines\n")

  m_out = Chem.SDWriter(output_name+'.sdf')
  for idx, List in enumerate(Mol_List):
    List.sort(key=lambda rank: float(rank[5]))
    pse_sdf = Chem.SDWriter("TEMP.clust."+str(idx)+".sdf")
    Img = []

    for M in List:
     # Create tag and write out to sdf file
      M[0].SetProp('Cluster', str(idx+1))
      M[0].SetProp('SMILES' , Chem.MolToSmiles(M[0]))
      m_out.write(M[0])

      pse_sdf.write(M[0])
      img_name = 'TEMP.'+M[1]+'.png'
      AllChem.Compute2DCoords(M[0])
      Draw.MolToFile(M[0], img_name, size=(200,200))
      img_link = '<img src="'+img_name+'">'
          # Img = (image_link, Name, Rank, Score, Type)
      Img.append([img_link, M[1], M[2], M[3], M[4]])

    pse_sdf.close()
    pymol_pml.write("load TEMP.clust."+str(idx)+".sdf, clust."+str(idx)+"\n")
    pymol_pml.write("dist HB."+str(idx)+", poly, clust."+str(idx)+", mode=2\n")

    Img_Data.append(Img)

  pymol_pml.write("show sticks, org\nsave "+output_name+".pse\nquit\n")
  pymol_pml.close()

  os.system("pymol -c "+pymol_nme)
  os.system("rm ./TEMP.clust.*.sdf")
  os.system("rm "+output_name+".pml")
  
## Print out a HTML page, in which every row has a maximum of 5 compound png.
## Every major cluster of compounds is grouped together.
## List the Name of the compound, then the Rank and Score.
  html_name = output_name+'.html'
  PAGE = open(html_name, 'w')
  for idx, C in enumerate(Img_Data):
    t = HTML.Table()
    c_temp = []	# Compound Row
    i_temp = []	# ID number Row
    s_temp = []	# Rank/Score Row
    for num, img in enumerate(C):
      if num == 0: 
        c_temp.append(img[0])
        i_temp.append('<center>'+img[1]+'</center>')
        s_temp.append('<center>{0}: {1} | {2}</center>'.format(img[4],img[2],img[3]))
      else:
        if num % column != 0: 
          c_temp.append(img[0])
          i_temp.append('<center>'+img[1]+'</center>')
          s_temp.append('<center>{0}: {1} | {2}</center>'.format(img[4],img[2],img[3]))
        else:
          t.rows.append(c_temp)
          t.rows.append(i_temp)
          t.rows.append(s_temp)
          c_temp = [img[0]]
          i_temp = ['<center>'+img[1]+'</center>']
          s_temp = ['<center>{0}: {1} | {2}</center>'.format(img[4], img[2], img[3])]

        if num == len(C)-1:
          t.rows.append(c_temp)
          t.rows.append(i_temp)
          t.rows.append(s_temp)
  
    htmlcode = str(t)
    if idx == len(Img_Data)-1:
      print PAGE.write('<p><b>  ###  No Cluster  ###</b></p>')
    print PAGE.write("<p><b>  ## Cluster: {0} -- {1} Hits ##</b></p>".format(idx+1, len(C)))
    print PAGE.write(htmlcode)
  print PAGE.write("<p><b>  ## no. of cluster: {0} ##</b></p>".format(len(Mol_List)))
  PAGE.close()
  os.system("google-chrome "+html_name)
#  pdf_msg = ("firefox -print "+html_name+" -printmode pdf -printfile "+
#             output_name+".pdf")
#  os.system(pdf_msg)


#######################################################################
#######################################################################
## Cluster Molecules based on Fingerprint
def ClusterFps(Fp, cutoff):
    from rdkit import DataStructs
    from rdkit.ML.Cluster import Butina

    # first generate the distance matrix:
    dists = []
    nfps = len(Fp)
    for i in range(1,nfps):
        sims = DataStructs.BulkTanimotoSimilarity(Fp[i], Fp[:i])
        dists.extend([1-x for x in sims])

    # now cluster the data:
    cs = Butina.ClusterData(dists, nfps, cutoff, isDistData=True)
    return cs


########################################################################


if __name__ == '__main__':
    main()
