#!/usr/bin/perl -w

###################
#
#	Peter M.U. Ung @ MSSM
#
#	v1.0	- 13.10.22	
#	v2.0	- 13.11.04 - Lig is represented by Top pose with ZINC ID
#
#	Using the [top result file] generated by vina_screen_get_top.py to
#	aggegrate the top pdbqt files into a PyMOL session
#
#	Required:	vina_screen_preprocess.py
#			vina_screen_get_top.py
#			
###################
die "\n    Usage: x.pl [Top result file] [dir with ZINC txt] [Protein pdb]\n        -- Do it at the same level as the directories with Vina docked results --\n\n"
  unless @ARGV == 3;


## Load the lists of pdbqt->ZINC
my %zinc;
my @file = `ls $ARGV[1]/*.txt`;
die "\n    Warning: ZINC reference files are zipped\n\n"
  if !@file;
foreach my $file (@file) {

  open ZINC, "< $file";
  while (<ZINC>) {
    chomp;
    my @line = split;
    my $ZINC = $line[2];
    my @mol  = split /\./, $line[0];
    my $ADid = $mol[0].".".$mol[1].".".$mol[3];

    $zinc{$ADid} = $ZINC;
  }
  print "\n  ## Finished loading $file\n\n";
  close ZINC;
}

## Load the list of top-ranking mol
@data = ();
open IN, "< $ARGV[0]";
while (<IN>) {
  next if /#/;
  my @line = split;
  my @fold = split /\//, $line[1];
  my @ADid = split /\./, $fold[1];

  my $scr  = $line[2];
  my $id   = $fold[0].".".$ADid[2];
             # (rank,     location, folder,   ADid,     ZINC,       score)
  push @data, [($line[0], $line[1], $fold[0], $ADid[2], $zinc{$id}, $scr)];
}
close IN;


open OUT, "> $ARGV[0].pml";
print OUT "load ".$ARGV[2]."\n";	# Load ref PDB into PyMOL

my @sdf;
open ALL, "> $ARGV[0].sdf";
for ($i = 0; $i <= $#data; $i++) {
  open SDF, "> ./rank.TEMP.$i.sdf";
  print "  $i - ";
  my @str = `obabel -ipdbqt $data[$i]->[1] -osdf -l 1`;
  foreach (@str) {
    $_ = "$data[$i]->[4]\n" if /\.pdbqt/;
    print SDF;
    print ALL;
  }
  close SDF;
  
  my $x = sprintf "load ./rank.TEMP.$i.sdf\n" ;	# Load sdf file into PyMOL
  push @sdf, $x;
}
close ALL;

print OUT "load $ARGV[0].sdf\n";
foreach (@sdf) { print OUT; }
print OUT "hide lines, poly\n";
print OUT "set line_width, 4\n";
print OUT "show cartoon, poly\n";
print OUT "set transparency, 0.1\n";
print OUT "show surface, poly\n";
print OUT "color cyan, poly\n";
print OUT "center poly\n zoom poly\n";
print OUT "save ".$ARGV[0].".pse\nquit\n";
close OUT;

system("pymol -c ".$ARGV[0].".pml");

system("rm ./rank.TEMP.*.sdf");
