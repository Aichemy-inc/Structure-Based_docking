#!/usr/bin/perl -w
use strict;

############################################################################
#
#	Peter M.U. Ung	@ MSSM
#
#	v1.0	- 13.10.24
#	v2.0	- 13.11.04 - add properties to SDF file for RDKit work
#
#	Extract the structure/SMILES of AutoDock .pdbqt result with the 
#	correpsonding ZINC ID.
#	Takes the Top list generated by vina_screen_get_top.py
#	Uses OBabel for conversion.
#	Handles .smi, .mol2, .sdf, .mol format.
#	SDF format is peferred for RDKit operation (default)
#
#	Required:	vina_screen_preprocess.py
#			vina_screen_get_top.py
#
############################################################################


die "\n    Usage: x.pl [dir with ZINC ref txt] [top result] [output format] [result filename]\n            ## SDF format is preferred for RDKit operation\n       -- Do it at the same level as the directories with Vina docked results --\n\n"
  unless @ARGV == 4;

my @file = `ls $ARGV[0]/*.txt`;
die "\n    Warning: ZINC reference files are zipped\n\n"
  if !@file;

my $format = 'sdf';

## Read in the reference files with ZINC ID
my %zinc;
foreach my $file (@file) {

  open ZINC, "< $file";
  while (<ZINC>) {
    chomp;
    my @line = split;
    my $ZINC = $line[2];
    my @mol  = split /\./, $line[0];
    my $ADid = $mol[0].".".$mol[1].".".$mol[3];

    $zinc{$ADid} = $ZINC;
  }
  print "\n  ## Finished loading $file\n\n";
  close ZINC;
}

## Read in the Top_Vina list
my @data = ();
open IN, "< $ARGV[1]";
while (<IN>) {
  next if /##/;
  last if /^\n/;
  my @line = split;
  my @fold = split /\//, $line[1];
  my @ADid = split /\./, $fold[1];

  my $scr  = $line[2];
  my $id   = $fold[0].".".$ADid[2];
             # (rank,     location, folder,   ADid,     ZINC      , score )
  push @data, [($line[0], $line[1], $fold[0], $ADid[2], $zinc{$id}, $scr)];
}
close IN;

## 
my $i = 1;
open OUT, "> $ARGV[3]";
foreach my $data (@data) {
  ## Output Top_Vina as SMILES file
  if ($format eq "smi") {
    my @smi = `obabel -ipdbqt $ARGV[0]$data->[1] -o$format --canonical -l 1`;
    my @check = split /\t/, $smi[0];

#    die "\n $check[1] != $data->[2].$data->[3]\n\n" if $check[1] !~ /$data->[2]\.$data->[3]/;
#    $smi[0] =~ s/\.pdbqt/ $data->[4]/;
    print OUT "$smi[0]\t$data->[4]\n";
  }
  ## Output Top_Vina as 3D file
  if ($format =~ /mol2|mol|sdf/) {
    my @str = `obabel -ipdbqt $data->[1] -o$ARGV[2] -l 1 --add formula MW logP TPSA`;
    foreach (@str) {
           # ZincID::Rank::Score
      $_ = "$data->[4]::$data->[0]::$data->[5]\n" if /\.pdbqt/;
      if (/<REMARK>/ and $format eq 'sdf') {
        print OUT ">  <ZINC>\n$data->[4]\n\n>  <VINARANK>\n";
        print OUT "$data->[0]\n\n>  <VINA>\n$data->[5]\n\n";
      }
      print OUT;
    }
  }
  print "$i  - "; $i++;
}
